#include <iostream>
#include <iomanip>
#include <cassert>

using namespace main_savitch_11;
//=========================== Constructor ====================//
template<class T>
set<T>::set() {
    data_count = 0;
    child_count = 0;
}
//=========================== Copy Constructor ===============//
template<class T>
set<T>::set(const set &source) {
    data_count = source.data_count;
    child_count = source.child_count;
    size_t i;
    for (i = 0; i < data_count; i++) {
        data[i] = source.data[i];
    }
    for (i = 0; i < child_count; i++) {
        subset[i] = new set<T>(*source.subset[i]);
    }
}
//=========================== =Operator ======================//
template<class T>
void set<T>::operator=(const set &source) {
    if (this == &source)
        return;
    clear();
    child_count = source.child_count;
    data_count = source.data_count;
    size_t i;
    for (i = 0; i < data_count; i++) {
        data[i] = source.data[i];
    }
    for (i = 0; i < child_count; i++) {
        subset[i] = new set<T>(*source.subset[i]);
    }
}
//=========================== Insert =========================//
template<class T>
bool set<T>::insert(const T &entry) {
    if (!loose_insert(entry)) {
        return false;
    }
    if (data_count > MAXIMUM) {
        set<T> *leftRoot = new set<T>();
        set<T> *rightRoot = new set<T>();
        size_t i;
        size_t half = data_count / 2;
        for (i = 0; i < half; i++) {
            leftRoot->insert(data[i]);
        }
        data[0] = data[i];
        for (i = i + 1; i < data_count; i++) {
            rightRoot->insert(data[i]);
        }
        data_count = 1;

        for (i = 0; i < child_count / 2; i++) {
            leftRoot->subset[leftRoot->child_count] = subset[i];
            leftRoot->child_count++;
        }
        for (i= 0; i < child_count; i++) {
            rightRoot->subset[rightRoot->child_count] = subset[i];
            rightRoot->child_count++;
        }
        subset[0] = leftRoot;
        subset[1] = rightRoot;
        child_count = 2;
    }
    return true;
}
//=========================== Clear ==========================//
template<class T>
void set<T>::clear() {
    if (child_count > 0 && subset[child_count - 1]->child_count > 0) {
        subset[child_count - 1]->clear();
    }
    while (child_count != 0) {
        delete subset[child_count - 1];
        child_count--;
    }
    data_count = 0;
}
//=========================== Remove Largest =================//
template<class T>
void set<T>::remove_largest(T &removed_entry) {
    assert(data_count > 0);
    if (child_count != 0) {
        subset[child_count - 1]->remove_largest(removed_entry);
        if (subset[child_count - 1]->data_count < MINIMUM) {
            fix_shortage(child_count - 1);
        }
    } else {
        removed_entry = data[data_count - 1];
        data_count--;
    }
}
//=========================== Fix Excess =====================//
template<class T>
void set<T>::fix_excess(size_t i) {
    set<T> *rightSubTree = new set<T>();
    size_t half = subset[i]->data_count / 2;
    size_t j;
    for (j = subset[i]->data_count - 1; j > half; j--) {
        rightSubTree->data[rightSubTree->data_count] = subset[i]->data[j];
        rightSubTree->data_count++;
        subset[i]->data_count--;
    }
    size_t k;
    for (k = data_count; k > 0 && data[k - 1] > subset[i]->data[j]; k--) {
        data[k] = data[k - 1];
    }
    data[k] = subset[i]->data[j];
    data_count++;
    subset[i]->data_count--;
    if (!subset[i]->is_leaf()) {
        half = subset[i]->child_count / 2;
        for (j = half; j < subset[i]->child_count; j++) {
            rightSubTree->subset[rightSubTree->child_count] = subset[i]->subset[j];
            subset[i]->child_count--;
            rightSubTree->child_count++;
        }
    }
    for (i = child_count; i > 0 && subset[i - 1]->data[0] > rightSubTree->data[0]; i--) {
        subset[i] = subset[i - 1];
    }
    subset[i] = rightSubTree;
    child_count++;
}
//=========================== Erase ==========================//
template<class T>
size_t set<T>::erase(const T &target) {
    if (!loose_erase(target)) {
        return false;
    }
    if (data_count == 0 && child_count > 0) {
        child_count--;
        for (size_t j = 0; j < child_count; j++) {
            subset[j] = subset[j + 1];
        }
        set<T> *temp = subset[0];
        child_count = 0;
        for (size_t i = 0; i < temp->data_count; i++) {
            data[i] = temp->data[i];
            data_count++;
        }
        for (size_t i = 0; i < temp->child_count; i++) {
            subset[i] = temp->subset[i];
            child_count++;
        }
        delete temp;
    }
    return 1;
}
//=========================== Loose Erase ====================//
template<class T>
bool set<T>::loose_erase(const T &target) {
    size_t i;
    for (i = 0; i < data_count && target > data[i]; i++) {
    }
    if (child_count == 0 && target != data[i]) {
        return false;
    } else if (child_count == 0 && target == data[i]) {
        while (i < data_count) {
            data[i] = data[i + 1];
            i++;
        }
        data_count--;
        return true;
    } else if (child_count != 0 && target != data[i]) {
        subset[i]->loose_erase(target);
        if (subset[i]->data_count < MINIMUM) {
            fix_shortage(i);
            return true;
        }
    } else if (child_count != 0 && target == data[i]) {
        subset[i]->remove_largest(data[i]);
        if (subset[i]->data_count < MINIMUM) {
            fix_shortage(i);
        }
        return true;
    }
    return false;
}
//=========================== Print ==========================//
template<class T>
void set<T>::print(int indent) const {
    int indentMore = 4;
    size_t i;
    cout << setw(indent) << "";
    for (i = 0; i < data_count; i++) {
        cout << data[i] << " ";
    }
    cout << endl;
    for (i = 0; i < child_count; i++)
        subset[i]->print(indent + indentMore);
}
//=========================== Fix Shortage ===================//
template<class T>
void set<T>::fix_shortage(size_t i) {
    if (i != 0 && (subset[i - 1]->data_count > MINIMUM)) {
        for (size_t j = 0; i < subset[i]->data_count; j++) {
            data[j + 1] = data[j];
        }
        subset[i]->data[0] = data[i - 1];
        subset[i]->data_count++;
        data[i - 1] = subset[i - 1]->data[subset[i - 1]->data_count - 1];
        subset[i - 1]->data_count--;
        if (subset[i - 1]->child_count > 0) {
            for (size_t j = 0; j < subset[i]->child_count; j++) {
                subset[i]->subset[j + 1] = subset[i]->subset[j];
            }
            subset[i]->subset[0] = subset[i - 1]->subset[subset[i - 1]->child_count - 1];
            subset[i]->child_count++;
            subset[i - 1]->child_count--;
        }
    } else if (i + 1 < child_count && subset[i + 1]->data_count > MINIMUM) {
        subset[i]->data[subset[i]->data_count] = data[i];
        subset[i]->data_count++;
        data[i] = subset[i + 1]->data[0];
        for (size_t j = 0; j < subset[i + 1]->data_count - 1; j++) {
            subset[i + 1]->data[j] = subset[i + 1]->data[j + 1];
        }
        subset[i + 1]->data_count--;
        if (subset[i + 1]->child_count != 0) {
            subset[i]->subset[subset[i]->child_count] = subset[i + 1]->subset[0];
            subset[i]->child_count++;
            for (size_t j = 0; j < subset[i + 1]->child_count; j++) {
                subset[i + 1]->subset[j] = subset[i + 1]->subset[j + 1];
            }
            subset[i + 1]->child_count--;
        }
    } else if (i > 0 && subset[i - 1]->data_count == MINIMUM) {
        subset[i - 1]->data[subset[i - 1]->data_count] = data[i - 1];
        subset[i - 1]->data_count++;
        for (size_t j = i - 1; j < data_count - 1; j++) {
            data[j] = data[j + 1];
        }
        data_count--;
        size_t j = 0;
        while (subset[i]->data_count != 0) {
            subset[i - 1]->data[subset[i - 1]->data_count] = subset[i]->data[j];
            subset[i - 1]->data_count++;
            subset[i]->data_count--;
            j++;
        }
        j = 0;
        while (subset[i]->child_count != 0) {
            subset[i - 1]->subset[subset[i - 1]->child_count] = subset[i]->subset[j];
            subset[i - 1]->child_count++;
            subset[i]->child_count--;
            j++;
        }
        delete subset[i];
        for (j = i; j < child_count - 1; j++) {
            subset[j] = subset[j + 1];
        }
        child_count--;
    } else if (i < child_count && subset[i + 1]->data_count == MINIMUM) {
        for (size_t j = subset[i + 1]->data_count; j > 0; j--) {
            subset[i + 1]->data[j] = subset[i + 1]->data[j - 1];
        }
        subset[i + 1]->data[0] = data[0];

        subset[i + 1]->data_count++;
        for (size_t j = 0; j < data_count - 1; j++) {
            data[j] = data[j + 1];
        }
        data_count--;
        while (subset[i]->data_count != 0) {
            for (size_t j = subset[i + 1]->data_count; j > 0; j--) {
                subset[i + 1]->data[j] = subset[i + 1]->data[j - 1];
            }
            subset[i + 1]->data[0] = subset[i]->data[subset[i]->data_count - 1];
            subset[i + 1]->data_count++;
            subset[i]->data_count--;
        }
        while (subset[i]->child_count != 0) {
            for (size_t j = subset[i + 1]->child_count; j > 0; j--) {
                subset[i + 1]->subset[j] = subset[i + 1]->subset[j - 1];
            }
            subset[i + 1]->subset[0] = subset[i]->subset[subset[i]->child_count - 1];
            subset[i + 1]->child_count++;
            subset[i]->child_count--;
        }
        delete subset[i];
        child_count--;
        for (size_t j = i; j < child_count; j++) {
            subset[j] = subset[j + 1];
        }
    } else {
        cout << "Error" << endl;
    }
}
//=========================== Count =====================//
template<class T>
size_t set<T>::count(const T &target) const {
    size_t i;
    for (i = 0; i < data_count && target > data[i]; i++) {}
    if (i < data_count && data[i] == target) {
        return 1;
    } else if (child_count == 0) {
        return 0;
    }
    return subset[i]->count(target);
}
//=========================== Loose Insert ===================//
template<class T>
bool set<T>::loose_insert(const T &entry) {
    size_t i;
    for (i = 0; i < data_count && entry > data[i]; i++) {}
    if (i < data_count && data[i] == entry) {
        return false;
    }
    if (is_leaf()) {
        size_t j;
        for (j = data_count; j > i; j--) {
            data[j] = data[j - 1];
        }
        data[i] = entry;
        data_count++;
        return true;
    }
    if (subset[i]->loose_insert(entry)) {
        if (subset[i]->data_count > MAXIMUM) {
            fix_excess(i);
        }
    }
    return true;
}
