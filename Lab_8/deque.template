//Author: Muhammad Ali
//Lab #8
//Deque

#include <cassert>

using namespace std;

///////////////////////////////////////
template <typename T>
deque<T>::deque() {
    count = 0;
    first = 0;
    last = 0;
}
///////////////////////////////////////
template <typename T>
T& deque<T>::front() {
    assert(!empty());
    return data[first];
}
///////////////////////////////////////
template <typename T>
T deque<T>::front() const {
    assert(!empty());
    T copy = data[first];
    return copy;
}
///////////////////////////////////////
template <typename T>
T& deque<T>::back() {
    assert(!empty());
    return data[last];
}
///////////////////////////////////////
template <typename T>
T deque<T>::back() const {
    assert(!empty());
    T copy = data[last];
    return copy;
}
///////////////////////////////////////
template <typename T>
void deque<T>::push_front (const T& entry) {
    assert(!full());
    if (!empty()) {
        first = prev_index(first);
    }
    data[first] = entry;
    count++;

}
///////////////////////////////////////
template <typename T>
void deque<T>::push_back (const T& entry) {
    assert(!full());
    if (!empty()) {
        last = next_index(last);
    }
    data[last] = entry;
    count++;
}
///////////////////////////////////////
template <typename T>
void deque<T>::pop_front() {
    assert(!empty());
    first = next_index(first);
    count--;
}
///////////////////////////////////////
template <typename T>
void deque<T>::pop_back() {
    assert(!empty());
    last = prev_index(last);
    count--;
}
///////////////////////////////////////
template <typename U>
bool operator == (const deque<U>& dq1, const deque<U>& dq2) {
    if(dq1.size() != dq2.size()) {
        return false;
    }
    U temp1 = dq1.first;
    U temp2 = dq2.first;
    for (size_t x = 0; x< dq1.size(); x++) {
        if (dq1.data[temp1] != dq2.data[temp2]) {
            return false;
        }
        temp1 = dq1.next_index(temp1);
        temp2 = dq2.next_index(temp2);
    }
    return true;
}
///////////////////////////////////////
template <typename U>
std::ostream& operator<< (std::ostream& out, const deque<U>& dq) {
    size_t temp = dq.first;
    for(size_t i =0; i< dq.size();i++)
    {
        out<< dq.data[temp]<<" ";
        temp = dq.next_index(temp);
    }
    return out;
}

